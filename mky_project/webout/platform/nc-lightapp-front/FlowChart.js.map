{"version":3,"sources":["webpack://[name]/./src/platform/containers/FlowChart/Component.js","webpack://[name]/./src/platform/containers/FlowChart/method.js","webpack://[name]/./src/platform/containers/FlowChart/NodeRender.js"],"names":["require","G6","track","FlowChart","props","state","json","inlt","data","nodes","edges","selectedId","generateInitSelected","list","originalSelectedId","researchedata","dagre","graph","this","getMultiLang","moduleId","callback","status","setState","flowFormatNode","call","createEdges","initFlowChart","expelSelectedId","renderFlowChart","initCenterPos","shouldChangePos","console","log","nextProps","equalArray","renderFlowInitData","JSON","stringify","resetChart","getSelectId","renderShape","Graph","container","height","fitView","plugins","Plugins","getTooltip","item","isEdge","getModel","desc","width","defaultIntersectBox","modes","default","edge","style","endArrow","node","shape","itemClickEvent","params","read","hasOwnProperty","focus","zoom","scale","currId","resetChartSuccess","isCurrentNodeIndex","isContextMenu","on","ev","window","event","preventDefault","onMenuNode","isNode","onClickNode","setTimeout","readOnly","model","id","index","ispassroute","color","content","changeNodeColor","getZoom","map","forEach","stroke","className","Component","propTypes","PropTypes","boolean","defaultProps","formatBeginEndDataSequence","length","beginNodeObj","endNodeArr","otherData","filter","startnode","isendnode","push","Object","keys","unshift","concat","findInitSelectedIndex","originalData","initPassIndex","initNotPassIndex","isFirstNotPassRoute","isPassArr","isNotPass","find","isCurrentNodeObj","isCurrentNode","finishedObj","isfinished","values","substring","gerStrokeColor","initSelectedIndex","isforecast","gerEdgeColor","obj","act_name","international","virtualName","slice","includes","act_id","name","x","dimension","split","y","label","text","fontSize","tipName","billmaker","actType","act_type_value","merge_way","branch_way","ismain","isstart","racemodal","participantProcessModeValue","participantProcessPassingThreshold","actortype","actor","approveusers","transitionName","transitionDesc","branch_way_value","merge_way_value","act_type","committime","realtranslinks","edgesArr","originalFromId","fromId","sign","splitFromIdBySign","from_id","Array","childItem","currIndex","prevNode","source","target","curIndex","virData","index_0","splice","actId","dragNodeChangePostion","dx","dy","update","undefined","toString","arr1","arr2","prototype","registerNode","getPath","Util","getRectPath"],"mappings":"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","file":"FlowChart.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport G6 from '@antv/g6';\r\nimport ajax from '../../api/ajax';\r\nimport toast from '../../api/toast';\r\nimport PropTypes from 'prop-types';\r\nimport { flowFormatNode, createEdges, dragNodeChangePostion, generateInitSelected, equalArray } from './method';\r\nimport { renderShape } from './NodeRender';\r\nimport { getMultiLang } from '../../api/getMultiLang';\r\n\r\nconst G6Plugins = require('@antv/g6/build/plugins');\r\n\r\n// 关闭 G6 的体验改进计划打点请求\r\nG6.track(false);\r\n\r\nclass FlowChart extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tjson: {},\r\n\t\t\tinlt: null,\r\n\t\t\tdata: {\r\n\t\t\t\tnodes: [],\r\n\t\t\t\tedges: []\r\n\t\t\t},\r\n\t\t\tselectedId: generateInitSelected(this.props.list || []), // 选中的节点id，页面初加载时选中节点为基本节点,即基于基本节点构建的上下游关系\r\n\t\t\toriginalSelectedId: generateInitSelected(this.props.list || []), //用于判断选中的节点是否是自身\r\n\t\t\tresearchedata: this.props.researchedata\r\n\t\t};\r\n\t\tthis.dagre = null;\r\n\t\tthis.graph = null;\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst {researchedata} = this.state;\r\n\t\tlet callback = (json, status, inlt) => {\r\n\t\t\tif (status) {\r\n\t\t\t\tthis.setState(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tjson,\r\n\t\t\t\t\t\tinlt,\r\n\t\t\t\t\t\tdata: {\r\n\t\t\t\t\t\t\tnodes: flowFormatNode.call(this, this.props.list || [], json, researchedata),\r\n\t\t\t\t\t\t\tedges: createEdges(this.props.list || [])\r\n\t\t\t\t\t\t} // 节点&流程指向数据\r\n\t\t\t\t\t},\r\n\t\t\t\t\t() => {\r\n\t\t\t\t\t\tthis.initFlowChart();\r\n\t\t\t\t\t\tthis.expelSelectedId();\r\n\t\t\t\t\t\tthis.renderFlowChart(this.state.data, { initCenterPos: true, shouldChangePos: true });\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('未加载 containers_flowchart.json 多语文件');\r\n\t\t\t}\r\n\t\t};\r\n\t\tgetMultiLang({ moduleId: 'containers_flowchart', callback });\r\n\t}\r\n\r\n\tcomponentWillReceiveProps(nextProps) {\r\n\t\tif (nextProps.list && !equalArray(nextProps.list, this.props.list)) {\r\n\t\t\tthis.renderFlowInitData(nextProps.list, nextProps.researchedata);\r\n\t\t}\r\n\t\t// console.log(this.props.researchedata, nextProps.researchedata)\r\n\t\tif(JSON.stringify(nextProps.researchedata) !== JSON.stringify(this.props.researchedata)) {\r\n\t\t\tthis.renderFlowInitData(nextProps.list, nextProps.researchedata);\r\n\t\t}\r\n\r\n\t\tif (nextProps.resetChart && nextProps.resetChart != this.props.resetChart) {\r\n\t\t\tthis.renderFlowChart(this.state.data, { initCenterPos: true, shouldChangePos: true });\r\n\t\t}\r\n\t}\r\n\r\n\t//格式化数据\r\n\trenderFlowInitData(list, researchedata = {}) {\r\n\t\tconst data = {\r\n\t\t\tnodes: flowFormatNode.call(this, list, this.state.json, researchedata),\r\n\t\t\tedges: createEdges(list)\r\n\t\t};\r\n\t\tlet selectedId = '';\r\n\t\tif (!this.state.selectedId) {\r\n\t\t\tselectedId = generateInitSelected(list);\r\n\t\t}\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tdata,\r\n\t\t\t\tselectedId,\r\n\t\t\t\tresearchedata\r\n\t\t\t},\r\n\t\t\t() => {\r\n\t\t\t\tthis.renderFlowChart(this.state.data);\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t// componentDidMount() {\r\n\t//     this.initFlowChart();\r\n\t//     this.expelSelectedId();\r\n\t//     this.renderFlowChart(this.state.data);\r\n\t// }\r\n\r\n\t//节点选中,数据回传\r\n\texpelSelectedId() {\r\n\t\tif (this.props.getSelectId && typeof this.props.getSelectId) {\r\n\t\t\tthis.props.getSelectId(this.state.selectedId, this.state.originalSelectedId);\r\n\t\t}\r\n\t}\r\n\r\n\t// 初始化渲染并绑定节点事件\r\n\tinitFlowChart() {\r\n\t\trenderShape(G6, 'react');\r\n\t\tthis.graph = new G6.Graph({\r\n\t\t\tcontainer: 'mountNode',\r\n\t\t\theight: 205,\r\n\t\t\tfitView: 'cc',\r\n\t\t\tplugins: [\r\n\t\t\t\tnew G6.Plugins['tool.tooltip']({\r\n\t\t\t\t\tgetTooltip({ item }) {\r\n\t\t\t\t\t\tif(!item.isEdge) return ;\r\n\t\t\t\t\t\tconst model = item.getModel();\r\n\t\t\t\t\t\treturn model.desc;\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew G6.Plugins['tool.minimap']({\r\n\t\t\t\t\tcontainer: 'mountNode',\r\n\t\t\t\t\twidth: 180,\r\n\t\t\t\t\theight: 120\r\n\t\t\t\t})\r\n\t\t\t],\r\n\t\t\tdefaultIntersectBox: 'rect', // 使用矩形包围盒\r\n\t\t\tmodes: {\r\n\t\t\t\tdefault: [ 'panBlank', 'panNode', 'wheelZoom' ]\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t//流程线条箭头设置\r\n\t\tthis.graph.edge({\r\n\t\t\tstyle: {\r\n\t\t\t\tendArrow: true\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconst that = this;\r\n\t\t//流程节点数据提示、形状设置\r\n\t\tthis.graph.node({\r\n\t\t\tshape: 'rect'\r\n\t\t});\r\n\t\t// if (!that.props.readOnly) {\r\n\t\t\tthat.itemClickEvent();\r\n\t\t// }\r\n\t}\r\n\r\n\trenderFlowChart(data, params = {}) {\r\n\t\t// this.graph.remove()\r\n\t\tthis.graph.read(data);\r\n\t\t//初始化中心节点位置\r\n\t\tif (params.hasOwnProperty('initCenterPos')) {\r\n\t\t\tif (this.state.selectedId) {\r\n\t\t\t\tthis.graph.focus(this.state.selectedId);\r\n\t\t\t} else {\r\n\t\t\t\tthis.graph.focus('isstart');\r\n\t\t\t}\r\n\t\t}\r\n\t\t//只在初始化调用一次节点位置变更事件(通过panNode模式调用)\r\n\t\tif (params.hasOwnProperty('shouldChangePos')) {\r\n\t\t\t// dragNodeChangePostion(this.graph);\r\n\t\t}\r\n\t\t//点击后维持原来缩放比\r\n\t\tif (params.hasOwnProperty('scale')) {\r\n\t\t\tthis.graph.zoom(params.scale);\r\n\t\t\tparams.hasOwnProperty('currId') && this.graph.focus(params.currId);\r\n\t\t}\r\n\r\n\t\tif (this.props.resetChartSuccess && typeof this.props.resetChartSuccess == 'function') {\r\n\t\t\tthis.props.resetChartSuccess(false);\r\n\t\t}\r\n\t}\r\n\r\n\t//节点点击事件绑定\r\n\titemClickEvent() {\r\n\t\tlet isCurrentNodeIndex = -1;\r\n\t\tlet isContextMenu = false;\r\n\t\tthis.graph.on('contextmenu', (ev) => {\r\n\t\t\tconst e = window.event;\r\n\t\t\te.preventDefault();\r\n\t\t\tif(this.props.onMenuNode && typeof this.props.onMenuNode === \"function\") {\r\n\t\t\t\tthis.props.onMenuNode(ev.item);\r\n\t\t\t\tisContextMenu = true;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.graph.on('click', (ev) => {\r\n\t\t\tif (!ev.item || !ev.item.isNode) return;\r\n\t\t\tif(this.props.onClickNode && typeof this.props.onClickNode === \"function\") {\r\n\t\t\t\tthis.props.onClickNode(ev.item);\r\n\t\t\t}\r\n\t\t\tsetTimeout( () => {\r\n\t\t\t\tif(isContextMenu) {//右键不允许触发左键关联方法\r\n\t\t\t\t\tisContextMenu = false;\r\n\t\t\t\t\treturn ;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.props.readOnly) return ;\r\n\t\t\t\tif (ev.item.model.id == 'isstart' || ev.item.model.id == 'isend') return;\r\n\t\t\t\t//有一个环节被驳回到之前流程，不能驳回之后的环节\r\n\t\t\t\tif (ev.item.model.hasOwnProperty('isCurrentNode')) {\r\n\t\t\t\t\tisCurrentNodeIndex = ev.item.model.index;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//未过的流程不允许选择\r\n\t\t\t\tif (!ev.item.model.ispassroute) {\r\n\t\t\t\t\ttoast({ color: 'warning', content: this.state.json['005'] }); // 005 未通过的环节不能驳回，请重新选择\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else if (ev.item.model.index > isCurrentNodeIndex && isCurrentNodeIndex != -1) {\r\n\t\t\t\t\ttoast({ color: 'warning', content: '待张寒定' });\r\n\t\t\t\t}\r\n\t\t\t\tif (ev.item.isNode) {\r\n\t\t\t\t\tlet selectedId = ev.item.id;\r\n\t\t\t\t\tif (selectedId !== this.state.selectedId) {\r\n\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\t\tselectedId\r\n\t\t\t\t\t\t\t},() => {\r\n\t\t\t\t\t\t\t\tthis.expelSelectedId();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet data = this.changeNodeColor(this.state.data, this.state.selectedId);\r\n\t\t\t\t\tconst scale = this.graph.getZoom();\r\n\t\t\t\t\tthis.setState({ data }, () => {\r\n\t\t\t\t\t\tthis.renderFlowChart(data, { scale, currId: ev.item.model.id });\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}, 100)\r\n\t\t});\r\n\t}\r\n\r\n\t//改变节点选中颜色\r\n\tchangeNodeColor(data, selectedId) {\r\n\t\t[ ...data.nodes, ...data.edges ].map((item, index) => {\r\n\t\t\titem.color = null;\r\n\t\t});\r\n\t\tconst { nodes, edges } = data;\r\n\t\tif (!nodes) return;\r\n\t\tnodes.forEach((item, index) => {\r\n\t\t\tif (item) {\r\n\t\t\t\tif (item.id === selectedId) {\r\n\t\t\t\t\titem.color = '#FFBCCA';\r\n\t\t\t\t\titem.style.stroke = '#FF7B96';\r\n\t\t\t\t} else if (!item.ispassroute) {\r\n\t\t\t\t\titem.color = '#E0E0E0';\r\n\t\t\t\t\titem.style.stroke = '#D5D4D5';\r\n\t\t\t\t} else if (item.ispassroute) {\r\n\t\t\t\t\titem.color = '#399FFE';\r\n\t\t\t\t\titem.style.stroke = '#A8D5FF';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn data;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"flow-chart-contain\">\r\n\t\t\t\t<div id=\"mountNode\" className=\"dagre\" />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nFlowChart.propTypes = {\r\n\treadOnly: PropTypes.boolean //水平子元素对齐方式\r\n};\r\n\r\n//指定默认值:\r\nFlowChart.defaultProps = {\r\n\treadOnly: false\r\n};\r\n\r\nexport default FlowChart;\r\n","/**对后台返回数据二次排序，主要调整开始，结束节点位置\r\n * startnode开始节点，isendnode结束节点\r\n * **/\r\nimport deepClone from \"../../public/deepClone\";\r\nconst formatBeginEndDataSequence = (data) => {\r\n    if(!data.length) {return []}\r\n    let beginNodeObj = {};\r\n    let endNodeArr = [];//可能有多个结束节点\r\n    let beginNodeIndex = -1;\r\n    let endNodeIndex = -1;\r\n    let otherData = data.filter( (item, index) => {\r\n        if(item.startnode) {\r\n            beginNodeObj = {...item};\r\n            beginNodeIndex = index;\r\n        }else if(item.isendnode) {\r\n            endNodeArr.push(item);\r\n            endNodeIndex = index;\r\n        }\r\n        return !item.startnode && !item.isendnode\r\n    })\r\n    Object.keys(beginNodeObj).length && otherData.unshift(beginNodeObj);\r\n\r\n    if(endNodeArr.length) {\r\n        otherData = otherData.concat(endNodeArr);\r\n    }\r\n\r\n    return otherData;\r\n}\r\n\r\n\r\n/**\r\n * 查找当前正处于的节点\r\n * isPassroute 的最后一项\r\n * **/\r\nconst findInitSelectedIndex = (originalData) => {\r\n    const data = formatBeginEndDataSequence(originalData);\r\n    if(!data.length) {return []};\r\n    let initPassIndex = -1;\r\n    let initNotPassIndex = -1;\r\n    let isFirstNotPassRoute = true;\r\n    let isCurrentNodeIndex = '';//可能有多个\r\n    const isPassArr = data.filter( (item, index) => {\r\n        // 找到最后一条pass数据(多分支情况可能有某个分支未通过，但下级分支通过情况)\r\n        if(!item.ispassroute && isFirstNotPassRoute && !item.startnode && !item.isendnode) {\r\n            isFirstNotPassRoute = false;\r\n            initNotPassIndex = index;\r\n        }else if(item.ispassroute && !item.startnode && !item.isendnode) {\r\n            initPassIndex = index;\r\n        }\r\n        return item.ispassroute && !item.startnode && !item.isendnode\r\n    })\r\n    const isNotPass = data.find( (item, index) => {\r\n        return !item.ispassroute && !item.startnode && !item.isendnode\r\n    })\r\n\r\n    //找寻当前所处节点，如果此节点存在，则此节点为当前选中节点，且后面节点通过，但不可驳回操作\r\n    const isCurrentNodeObj = data.find( (item, index) => {\r\n        if(item.hasOwnProperty('isCurrentNode') && item.isCurrentNode) {\r\n            isCurrentNodeIndex = index + ','; \r\n        }\r\n        return item.isCurrentNode;\r\n    })\r\n\r\n    //isfinished表示该节点进去，此节点已经被走过并完成\r\n    const finishedObj = data.find( (item, index) => {\r\n        return item.isfinished\r\n    })\r\n    \r\n    if(!!finishedObj && Object.keys(finishedObj).length) {\r\n        return false;//找不到的节点坐标\r\n    }else if(isCurrentNodeObj && Object.values(isCurrentNodeObj)) {//有个节点被驳回到当前节点之前节点\r\n        return isCurrentNodeIndex.substring(0,isCurrentNodeIndex.length-1);\r\n    }else if(!isNotPass && Object.keys(isPassArr).length) {//全是已走过的流程节点\r\n        return data.length-2\r\n    }else if(!isPassArr.length || initNotPassIndex == 0) {//全是未走的流程\r\n        return false;\r\n    }\r\n    \r\n    return initPassIndex > initNotPassIndex ? initPassIndex : initNotPassIndex-1;\r\n}\r\n\r\nfunction gerStrokeColor(item, index, initSelectedIndex) {\r\n    let color =  \"#DFDEDF\";\r\n    if(index === initSelectedIndex || item.isCurrentNode) {\r\n        color = '#FF96AC';\r\n    }else if(item.ispassroute) {\r\n        color = '#0092FE';\r\n    }else if(item.isforecast) {\r\n        color = '#FFC285';\r\n    }\r\n    // else if(item.isforecast || \r\n    //     (researchedata && Object.keys(researchedata).length && Object.keys(researchedata).includes(item.act_id))) {\r\n    //     color = '#FFC285';\r\n    // }\r\n    return color;\r\n}\r\n\r\n/**\r\n * 节点信息生成\r\n * **/\r\nfunction flowFormatNode(originalData,international, researchedata){\r\n    console.log(\"researchedata\", researchedata)\r\n    const data = formatBeginEndDataSequence(originalData);\r\n    if(!data.length) {return []};\r\n    const initSelectedIndex = findInitSelectedIndex(data);\r\n    console.log(\"initSelectedIndex\", initSelectedIndex)\r\n    return data.map( (item, index) => {\r\n        let virtualName = item.act_name && item.act_name.length > 7 ? `${item.act_name.slice(0,7)}...` : item.act_name;\r\n        //设置当前选中的节点\r\n        let color = '#E0E0E0';\r\n        if(index === initSelectedIndex || item.isCurrentNode) {\r\n            color = '#FFBCCA';\r\n        }else if(item.ispassroute) {\r\n            color = '#A8D5FF';\r\n        }else if(item.isforecast || \r\n            (researchedata && Object.keys(researchedata).length && Object.keys(researchedata).includes(item.act_id))) {\r\n            color = '#FFD9B3';\r\n        }\r\n\r\n        return {\r\n            id: item.act_id ? item.act_id : item.startnode ? 'isstart' : `isend${index}`,\r\n            name: virtualName ? virtualName : item.startnode ? international['006'] : international['007'], // 006 开始  007 结束\r\n            x: item.dimension.split(';')[0] * 1.2,\r\n            y: item.dimension.split(';')[1] * 1.2,\r\n            color: color,\r\n            ispassroute: item.ispassroute,\r\n            style: {stroke: gerStrokeColor(item, index, initSelectedIndex)},\r\n            label: {//文本图形配置\r\n                text: virtualName ? virtualName : item.startnode ? international['006'] : international['007'],\r\n                fontSize: 13\r\n            },\r\n            tipName: item.act_name ? item.act_name : item.startnode ? international['006'] : international['007'],\r\n            billmaker: item.billmaker, // 008 无\r\n            actType: item.act_type_value || international['009'], // 009 暂无\r\n            merge_way: item.merge_way || international['009'], // 暂无\r\n            branch_way: item.branch_way || international['009'], // 暂无\r\n            ismain: item.ismain || false,\r\n            isstart: item.isstart || false,\r\n            index: index,//中间有环节被驳回时使用(后面是已通过环节)\r\n            racemodal: item.racemodal,\r\n            participantProcessModeValue: item.participantProcessModeValue,\r\n            participantProcessPassingThreshold: item.participantProcessPassingThreshold,\r\n            actortype: item.actortype,\r\n            actor: item.actor,\r\n            approveusers: item.approveusers || [],\r\n            transitionName: item.transitionName || \"\",\r\n            transitionDesc: item.transitionDesc || \"\",\r\n            isforecast: item.isforecast || false,\r\n            branch_way_value: item.branch_way_value || \"\",\r\n            merge_way_value: item.merge_way_value || \"\",\r\n            act_type: item.act_type || \"\",\r\n            committime: item.committime || \"\",\r\n            realtranslinks: item.realtranslinks || []\r\n            \r\n        }\r\n    })\r\n}\r\n/**\r\n * 一个流程节点包含多个来源\r\n * **/\r\nconst splitFromIdBySign = (fromId, sign=',') => {\r\n    //开始节点，无fromId属性，用自己配置的'isstart'\r\n    if(!fromId) {return 'isstart'}\r\n    if(!fromId.includes(sign)) {return fromId}\r\n    return fromId.split(sign);\r\n}\r\n\r\nconst gerEdgeColor = (item, obj) => {\r\n    console.log(\"obj\", obj.act_name, obj)\r\n    let color = \"#E0E0E0\";\r\n    // if(item.ispassroute && item.realtranslinks.includes(obj.act_id)) {//可以解决多来源，后台数据源连线错误问题，结合后台补丁使用\r\n    if(item.ispassroute) {\r\n        color = \"#A8D5FF\";\r\n    }else if(item.isforecast && (obj.isforecast || obj.ispassroute)) {\r\n        color = \"#FFD9B3\";\r\n    }\r\n    return color;\r\n}\r\n\r\n/**\r\n * 流程节点关系数组生成\r\n * **/\r\nconst createEdges = (originalData) => {\r\n    const data = formatBeginEndDataSequence(originalData);\r\n    if(!data.length) {return []}\r\n    let edgesArr = [];\r\n    data.map( (item, index) => {\r\n        if(index > 0) {\r\n            //拆分后的真实fromId\r\n            const originalFromId = splitFromIdBySign(item.from_id);\r\n            if(originalFromId instanceof Array) {//同一节点有多个来源\r\n                originalFromId.map((childItem, index) => {\r\n                    let currIndex = -1;\r\n                    const prevNode = data.find( (item) => {\r\n                        if(item.act_id === childItem) {\r\n                            currIndex = index;\r\n                            return true;\r\n                        }\r\n                    });\r\n                    edgesArr.push({\r\n                        source: childItem,//上一节点id\r\n                        target: item.act_id,//当前节点id \r\n                        id: `${childItem}-${item.act_id}`,\r\n                        color: gerEdgeColor(item, prevNode),\r\n                        label: currIndex > -1 && item.transitionName && item.transitionName.includes(\",\") ? \r\n                            item.transitionName.split(\",\")[currIndex] :item.transitionName,\r\n                        desc: item.transitionDesc\r\n                    })\r\n                })\r\n            }else {\r\n                let curIndex = -1,\r\n                    obj = null,\r\n                    virData = deepClone(data);\r\n                obj = virData.find( (list, index_0) => {\r\n                    if(item.from_id && item.isforecast && item.from_id.includes(list.act_id)) {\r\n                        curIndex = index_0;\r\n                        return true;\r\n                    }\r\n                })\r\n                obj = !!obj ? obj : {};\r\n                console.log(\"obj111\", obj.act_name, obj)\r\n                curIndex > -1 && virData.splice(curIndex, 1);\r\n                const fromId = item.from_id || 'isstart';//上一节点id\r\n                const actId = item.act_id || `isend${index}`;//当前节点id \r\n                edgesArr.push({\r\n                    source: fromId,//上一节点id\r\n                    target: actId,//当前节点id \r\n                    id: `${fromId}-${actId}`,\r\n                    color: gerEdgeColor(item, obj),\r\n                    label: item.transitionName,\r\n                    desc: item.transitionDesc\r\n                })\r\n            }\r\n        }\r\n    })\r\n    return edgesArr;\r\n}\r\n\r\n/**\r\n * 节点简单拖拽位置变化\r\n * **/\r\nconst dragNodeChangePostion = (graph) => {\r\n    let node;\r\n    let dx;\r\n    let dy;\r\n\r\n    graph.on('node:dragstart', ev=>{\r\n      const {item} = ev;\r\n      const model = item.getModel();\r\n      node = item;\r\n      dx = model.x - ev.x;\r\n      dy = model.y - ev.y;\r\n    });\r\n    graph.on('node:drag', ev=>{\r\n      node && graph.update(node, {\r\n        x: ev.x+dx,\r\n        y: ev.y+dy\r\n      });\r\n    });\r\n    graph.on('node:dragend', ev=>{\r\n      node = undefined;\r\n    });\r\n}\r\n\r\n/**\r\n * 生成初始化的当前所属节点\r\n * **/\r\nconst generateInitSelected = (originalData) => {\r\n    const data = formatBeginEndDataSequence(originalData);\r\n    const initSelectedIndex = findInitSelectedIndex(data);\r\n    if(!initSelectedIndex) {return ''}; \r\n    if(!data.length) {return ''};\r\n    const selectedId =  data.find( (item, index) => {\r\n        return initSelectedIndex.toString().includes(',') ? initSelectedIndex.toString().includes(index) : initSelectedIndex == index\r\n    }).act_id;\r\n\r\n    return selectedId\r\n}\r\n\r\n/**\r\n * 判断两个对象数组是否相等\r\n * **/\r\nconst equalArray = (arr1, arr2) => {\r\n    if(!arr2) return true;\r\n    if(Object.prototype.toString.call(arr1).slice(8, -1) !== 'Array' || Object.prototype.toString.call(arr2).slice(8, -1) !== 'Array') return false; \r\n    return JSON.stringify(arr1) === JSON.stringify(arr2)\r\n}\r\n\r\nexport {\r\n    flowFormatNode,\r\n    createEdges,\r\n    dragNodeChangePostion,\r\n    generateInitSelected,\r\n    equalArray\r\n}","const renderShape = (G6,shape) => {\r\n    if(shape === 'react') {\r\n        return G6.registerNode('rect', {\r\n            getPath: function getPath(item) {\r\n              var width = 100; // 一半宽\r\n              var height = 30; // 一半高\r\n              return G6.Util.getRectPath(-width / 2, -height / 2, width, height, 15);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport {\r\n    renderShape,\r\n}\r\n"],"sourceRoot":""}